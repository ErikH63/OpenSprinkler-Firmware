diff --git a/OpenSprinkler.cpp b/OpenSprinkler.cpp
index 408f1e4..dfffd29 100644
--- a/OpenSprinkler.cpp
+++ b/OpenSprinkler.cpp
@@ -33,7 +33,10 @@
 #define STA_SET_FORCE   0x80
 
 /** Declare static data members */
+#ifdef MQTT
 OSMqtt OpenSprinkler::mqtt;
+#endif // MQTT
+
 NVConData OpenSprinkler::nvdata;
 ConStatus OpenSprinkler::status;
 ConStatus OpenSprinkler::old_status;
@@ -93,7 +96,7 @@ extern char ether_buffer[];
 	extern SdFat sd;
 #else
 	#if defined(OSPI)
-		byte OpenSprinkler::pin_sr_data = PIN_SR_DATA;
+		int OpenSprinkler::pin_sr_data = PIN_SR_DATA;
 	#endif
 	// todo future: LCD define for Linux-based systems
 #endif
@@ -1585,7 +1588,7 @@ void OpenSprinkler::switch_rfstation(RFStationData *data, bool turnon) {
  * Third byte is either 0 or 1 for active low (GND) or high (+5V) relays
  */
 void OpenSprinkler::switch_gpiostation(GPIOStationData *data, bool turnon) {
-    byte gpio = 0;
+    int gpio = 0;
     for( int i = 0 ; i < sizeof(data->pin) ; i++ )
         gpio = gpio * 10 + data->pin[i] - '0';
 	byte activeState = data->active - '0';
diff --git a/OpenSprinkler.h b/OpenSprinkler.h
index 366123a..fd31642 100644
--- a/OpenSprinkler.h
+++ b/OpenSprinkler.h
@@ -29,7 +29,10 @@
 #include "utils.h"
 #include "gpio.h"
 #include "images.h"
+
+#ifdef MQTT
 #include "mqtt.h"
+#endif // MQTT
 
 #if defined(ARDUINO) // headers for ESP8266
 	#include <Arduino.h>
@@ -150,11 +153,13 @@ public:
 #endif
 
 #if defined(OSPI)
-	static byte pin_sr_data;		// RPi shift register data pin
+	static int pin_sr_data;		// RPi shift register data pin
 															// to handle RPi rev. 1
 #endif
 
+#ifdef MQTT
 	static OSMqtt mqtt;
+#endif // MQTT
 
 	static NVConData nvdata;
 	static ConStatus status;
diff --git a/gpio.cpp b/gpio.cpp
index cf493c7..da96e66 100644
--- a/gpio.cpp
+++ b/gpio.cpp
@@ -287,7 +287,7 @@ int gpio_fd_open(int pin, int mode) {
 	snprintf(path, BUFFER_MAX, "/sys/class/gpio/gpio%d/value", pin);
 	fd = open(path, mode);
 	if (fd < 0) {
-		DEBUG_PRINTLN("failed to open gpio");
+		printf("failed to open gpio %d\n", pin);
 		return -1;
 	}
 	return fd;
diff --git a/main.cpp b/main.cpp
index ecd1812..1c890a2 100644
--- a/main.cpp
+++ b/main.cpp
@@ -27,7 +27,10 @@
 #include "program.h"
 #include "weather.h"
 #include "server.h"
+
+#ifdef MQTT
 #include "mqtt.h"
+#endif // MQTT
 
 #if defined(ARDUINO)
 	EthernetServer *m_server = NULL;
@@ -292,7 +295,6 @@ void do_setup() {
 #endif
 
 	DEBUG_BEGIN(115200);
-	
 	os.begin();					 // OpenSprinkler init
 	os.options_setup();  // Setup options
 
@@ -348,9 +350,12 @@ ISR(WDT_vect)
 }
 #endif
 
-#else
+#else   // not ARDUINO
 
 void do_setup() {
+#ifdef EMUL
+    printf("Starting as emulated\n");
+#endif
 	initialiseEpoch();	 // initialize time reference for millis() and micros()
 	os.begin();					 // OpenSprinkler init
 	os.options_setup();  // Setup options
@@ -366,7 +371,9 @@ void do_setup() {
 	}
 	os.status.req_network = 0;
 
+#ifdef MQTT
 	os.mqtt.init();
+#endif // MQTT
 	os.status.req_mqtt_restart = true;
 }
 #endif
@@ -564,10 +571,14 @@ void do_loop()
 
 	// Start up MQTT when we have a network connection
 	if (os.status.req_mqtt_restart && os.network_connected()) {
+#ifdef MQTT
 		os.mqtt.begin();
+#endif // MQTT
 		os.status.req_mqtt_restart = false;
 	}
+#ifdef MQTT
 	os.mqtt.loop();
+#endif // MQTT
 
 	// The main control loop runs once every second
 	if (curr_time != last_time) {
@@ -1281,6 +1292,7 @@ void push_message(int type, uint32_t lval, float fval, const char* sval) {
 	char* postval = tmp_buffer;
 	uint32_t volume;
 
+#ifdef MQTT
 	bool ifttt_enabled = os.iopts[IOPT_IFTTT_ENABLE]&type;
 
 	// check if this type of event is enabled for push notification
@@ -1457,6 +1469,7 @@ void push_message(int type, uint32_t lval, float fval, const char* sval) {
 
 		os.send_http_request(DEFAULT_IFTTT_URL, 80, ether_buffer, remote_http_callback);
 	}
+#endif // MQTT
 }
 
 // ================================
diff --git a/server.cpp b/server.cpp
index 68c310d..6ecdc88 100644
--- a/server.cpp
+++ b/server.cpp
@@ -25,7 +25,10 @@
 #include "program.h"
 #include "server.h"
 #include "weather.h"
+
+#ifdef MQTT
 #include "mqtt.h"
+#endif // MQTT
 
 // External variables defined in main ion file
 #if defined(ARDUINO)
@@ -630,17 +633,20 @@ void server_change_stations() {
 			if(tmp_buffer[0] == STN_TYPE_GPIO) {
 				// check that pin does not clash with OSPi pins
                 GPIOStationData * std = (GPIOStationData *) (tmp_buffer + 1);
-				byte gpio = 0;
+				int gpio = 0;
 				for( int i = 0 ; i < sizeof(std->pin) ; i++ )
                     gpio = gpio * 10 + std->pin[i] - '0';
 				byte activeState = std->active - '0';
 
-				byte gpioList[] = PIN_FREE_LIST;
-				bool found = false;
-				for (byte i = 0; i < sizeof(gpioList) && found == false; i++) {
-					if (gpioList[i] == gpio) found = true;
-				}
-				if (!found || activeState > 1) handle_return(HTML_DATA_OUTOFBOUND);
+				// byte gpioList[] = PIN_FREE_LIST;
+				// bool found = false;
+				// for (byte i = 0; i < sizeof(gpioList) && found == false; i++) {
+			// 		if (gpioList[i] == gpio) found = true;
+			// 	}
+				//if (!found || activeState > 1) handle_return(HTML_DATA_OUTOFBOUND);
+				if ( activeState > 1 )
+                    handle_return(HTML_DATA_OUTOFBOUND);
+
 			} else if (tmp_buffer[0] == STN_TYPE_HTTP) {
 				#if defined(ESP8266)	// ESP8266 performs automatic decoding so no need to do it again
 					if(m_server) urlDecode(tmp_buffer + 1);
